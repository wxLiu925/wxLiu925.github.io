[{"title":"C++面经Part1","url":"/2023/10/25/C-面经Part1/","content":"### const\n主要有以下作用:\n1. 修饰变量，说明该变量不可改变;\n2. 修饰指针，这里分为**指向常量的指针(指针常量，pointer to const)**和**自身是常量的指针(常量指针，const pointer)**\n```cpp\nint a = 0, b = 10;\nconst int *p1 = &a; // 指针常量，指向的值不可以使用*p修改，*p = 10 错误，可以修改指向的地址\nint *const p2 = &a; // 常量指针，指针指向的地址不可改变，p2 = &b 错误，可以修改该地址的变量值\n```\n3. 修饰引用，指向常量的引用，用于形参类型，既避免了拷贝，又避免了函数对值进行修改\n4. 类内修饰成员函数，说明该成员函数内不能修改成员变量\n\n```cpp\n#include <iostream>\n\nclass A {\nprivate:\n    const int a;\npublic:\n    // 构造函数\n    A() : a(0) { };\n    A(int x) : a(x) { };\n\n    // const可用于对重载函数的区分\n    // 普通成员函数\n    void func() {\n        std::cout << \"这是一个普通函数\" << std::endl;\n    }\n    // 常成员函数，不得修改类中任何数据的值\n    void func() const {\n        std::cout << \"这是一个常函数\" << std::endl;\n    }\n};\n\nint main() {\n    A obj1;\n    const A obj2;\n    obj1.func(); // \"这是一个普通函数\"\n    obj2.func(); // \"这是一个常函数\"\n    return 0;\n}\n```\n需要注意的是，普通对象可以调用普通函数也可以调用常函数，前者优先，如果是常量对象的话，只能调用常函数，如果调用普通函数会导致报错。\n\n进一步地\n```cpp\n// 函数\nvoid function1(const int Var);           // 传递过来的参数在函数内不可变\nvoid function2(const char* Var);         // 参数指针所指内容为常量\nvoid function3(char* const Var);         // 参数指针为常量\nvoid function4(const int& Var);          // 引用参数在函数内为常量\n// 没有 const reference，因为引用只是对象的别名，引用不是对象，不能用 const 修饰\n\n// 函数返回值\nconst int function5();      // 返回一个常数\nconst int* function6();     // 返回一个指向常量的指针变量，使用：const int *p = function6();\nint* const function7();     // 返回一个指向变量的常指针，使用：int* const p = function7();\n```\n\n### static\n主要有以下作用:\n1. **修饰普通变量:** 修改变量的存储区域和生命周期，使变量存储在静态区域，在main函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。需要注意的是: 在函数内部定义了一个静态变量，生命周期到程序结束，但是这个变量的作用域仅限于声明它的函数内部。\n```cpp\nvoid myFunction() {\n    static int count = 0; // 静态局部变量\n    count++;\n    std::cout << \"Count: \" << count << std::endl;\n}\n\nint main() {\n    myFunction(); // 输出 Count: 1\n    myFunction(); // 输出 Count: 2\n    // 这里无法直接访问 count\n    return 0;\n}\n```\n2. **修饰普通函数:** 表明函数的作用范围，仅在定义该函数的文件内才能使用，它的作用域被限制在声明它的文件中，即它变成了一个“内部链接”的函数，只能在当前文件内部访问。在多人开发项目时，为了防止与他人命名空间里的函数重名，可以将函数定位为 static。\n```cpp\n// File1.cpp\nstatic void myFunction() {\n    std::cout << \"这是一个静态函数\" << std::endl;\n}\n// File2.cpp\nvoid anotherFunction() {\n    myFunction(); // 错误，无法访问静态函数\n}\n```\n3. **修饰成员变量:** 修饰成员变量时该变量将被所有该类的对象共享，而不是每个对象拥有一份副本，而且不需要生成对象就可以访问该成员。\n```cpp\nclass MyClass {\npublic:\n    static int count; // 静态成员变量\n};\n\nint MyClass::count = 0; // 静态成员变量的初始化\n\nint main() {\n    MyClass obj1;\n    MyClass obj2;\n\n    obj1.count = 5;\n    std::cout << obj2.count << std::endl; // 输出 5\n\n    return 0;\n}\n```\n4. **修饰成员函数:** 修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内只能访问 static 成员。\n\n### this 指针\n`this` 指针是一个特殊的指针，它指向当前对象的地址。在 C++ 中，每个类的非静态成员函数都有一个隐含的 `this`` 指针，它指向调用该成员函数的对象。\n\n当一个类对象调用成员函数时，编译程序先将对象的地址赋给了 `this` 指针，然后调用该成员函数，每次成员函数存取数据成员时，都其实是在隐式地使用 `this` 指针。\n\n`this` 指针是一个常量指针，被隐含地声明为: `ClassName *const this` ，这意味着不能给 `this` 指针赋值，而在 `const` 成员函数里被声明为 `const ClassName* const`\n\n最后还需要注意的是，`this` 并不是一个常规变量，而是个右值，所以不能取得 `this` 的地址(不能 `&this`)\n\n### 左值和右值(引用)\n1. 左值(lvalue)\n+ 左值既能够出现在等号左边，也能出现在等号右边\n+ 左值可以被赋值，可以作为赋值语句的目标\n+ 左值是可寻址的变量，有持久性\n+ 具体来说，变量、对象或者通过解引用获得的指针都属于左值\n```cpp\nint x = 5; // x 是左值，因为它代表一个内存位置，可以被赋值\nint* ptr = &x; // &x 是左值，因为它是变量 x 的地址\n```\n\n2. 右值(rvalue)\n+ 右值是不能被赋值的表达式，它们代表的是一个数值或者临时值，通常在赋值语句的右侧\n+ 右值可以是一个常数、一个临时的计算结果或者一个表达式的返回值。\n+ 右值在使用后就失去意义，因此不能被取地址\n```cpp\nint y = 10; // 10 是右值，因为它代表一个数值，不能被赋值\nint z = x + y; // x + y 是右值，因为它代表一个临时计算结果\n```\n\n> C++ Prime:\" 当一个对象被用作右值的时候，用的是对象的值(内容);当对象被用作左值时，用的是对象的身份(在内存中的位置)\"\n\n左值引用(lvalue reference)和右值引用(rvalue reference)是C++中引入的两种不同类型的引用。\n\n3. **左值引用:** 左值引用是最常见的引用类型。它们使用 `&` 符号声明，并且只能绑定到左值(可以取地址的表达式)。\n4. **右值引用:** 右值引用是在C++11中引入的新特性，用 && 符号表示。它们可以绑定到临时值、表达式结果或具有名称的右值。\n```cpp\nint x = 6; // x是左值，6是右值\nint &y = x; // 左值引用，y引用x\n\nint &z1 = x * 6; // 错误，x*6是一个右值\n\nint &&z2 = x * 6; // 正确，右值引用\nint &&z3 = x; // 错误，x是一个左值\n```\n> 可以引用右值的除了右值引用外还有 const 左值引用，例如 `const int &z4 =  x * 6;` 正确，可以将一个const引用绑定到一个右值。例如 `std::vector` 的 `push_back` 函数就使用了 const 左值引用(`void push_back (const value_type& val);`) ，这样能让我们使用 `v.push_back(1)` 这样的代码。\n\n`std::move` 可以实现将左值转换成右值以实现对左值进行右值引用\n```cpp\nint i = 3, j;\nj = std::move(2); // 合法，从一个右值移动数据\nj = std::move(i); // 合法，从一个左值移动数据，i的值之后是不确定的。\n```\n\n### inline 内联函数\n主要有以下特征:\n+ 相当于把内联函数里面的内容写在调用内联函数处;\n+ 相当于不用执行进入函数的步骤，直接执行函数体;\n+ 相当于宏，却比宏多了类型检查，真正具有函数特性;\n+ 编译器一般不内联包含循环、递归、switch 等复杂操作的内联函数;\n+ 在类声明中定义的函数，除了虚函数的其他函数都会自动隐式地当成内联函数。\n\n```cpp\n// 一般在类内定义的成员函数会隐式成为inline，而在类外定义的成员函数不会(当然是否内联完全取决于编译器)\n// 类内定义，隐式内联\nclass A {\n    int doA() { return 0; }         // 隐式内联\n}\n// 类外定义，需要显式内联\nclass A {\n    int doA();\n}\ninline int A::doA() { return 0; }   // 需要显式内联\n```\n\n虚函数可以是内联函数吗？\n[Standard C++: Are “inline virtual” member functions ever actually “inlined”?](https://isocpp.org/wiki/faq/value-vs-ref-semantics#:~:text=Therefore%20the%20only%20time%20an,or%20reference%20to%20an%20object.)\n[Stackoverflow: Can virtual functions be inlined [duplicate]](https://stackoverflow.com/questions/18432040/can-virtual-functions-be-inlined)\n\n虚函数可以是内联函数，但是当虚函数表现出多态性的时候不能内联，因为内联是在编译期建议编译器内联，而虚函数的多态性在运行期，编译器无法知道运行期调用哪个代码，因此虚函数表现为多态性的时候不可以内联。\n\n下面是虚函数内联使用例子\n```cpp\n#include <iostream>\n\nclass Base {\npublic:\n    inline virtual void who() {\n        std::cout << \"I am Base\" << std::endl;\n    }\n    virtual ~Base() { }\n};\n\nclass Derived: public Base {\npublic:\n    // // 不写 inline 时会隐式内联\n    inline void who() {\n        std::cout << \"I am Derived\" << std::endl;\n    }\n};\n\nint main() {\n    Base fa;\n    fa.who(); // 此处的虚函数 who()，是通过类（Base）的具体对象（b）来调用的，编译期间就能确定了，所以它可以是内联的，但最终是否内联取决于编译器。\n\n    // 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。\n    Base *ptr = new Derived();\n    ptr->who();\n\n    // 因为Base有虚析构函数（virtual ~Base() {}），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。\n    delete ptr;\n    ptr = nullptr;\n\n    return 0;\n}\n```\n\n具体来说，就是\n1. 当使用类的对象来调用时，则虚函数可以当做是内联的，因为编译器在编译时就确切知道对象是哪个类的;\n2. 当使用基类指针或引用来调用虚函数时，它都不能是内联函数，因为调用发生在运行时，是动态绑定的。\n","tags":["C++"]},{"title":"CSAPP-计算机系统漫游","url":"/2023/10/23/CSAPP-计算机系统漫游/","content":"之前在读 xv6-book 的时候，发现自己对一些计算机底层的知识了解的太少，导致看到虚拟内存映射、物理地址这些东西的时候就很头大。在一个群友的推荐下，我决定先来看一下CSAPP的1、2、3、6、7、8、9章(当然，还有一种方案是学习CS61C)，于是有了这个系列。\n\ngitbook: https://hansimov.gitbook.io/csapp/\n\n## 系统的硬件组成\n### 1.总线\n总线是贯穿整个系统的一组电子管道。它们携带者信息字节在各个部件之间传递，传送定长的字节块(字)。字中的字节数(字长)是一个基本的系统参数，通常是4个字节(32位)、8个字节(64位)。\n\n### 2.I/O 设备\n示例有作为用户输入的键盘和鼠标，作为用户输出的显示器，用于长期存储数据和程序的磁盘驱动器(磁盘)。每个 I/O 设备都通过一个**控制器**或者**适配器**与 I/O 总线相连。\n> 控制器和适配器之间的区别在于它们的封装方式: 控制器是 I/O 设备本身或系统的主板上的芯片组，而适配器则是一块插在主板插槽上的卡。功能都是在 I/O 总线和 I/O 设备之间传递信息。\n\n### 3.主存\n主存是一个临时存储设备，在处理器执行程序时，用来存放程序和程序处理的数据。从物理上来说，主存是由一组 **动态随机获取存储器(DRAM)** 芯片组成;从逻辑上来说，存储器是一个线性的字节数组，每个字节都有其唯一的地址，这些地址是从零开始的。\n\n### 4.处理器\n**中央处理单元(CPU)**简称为处理器，是解释(或执行)存储在主存中指令的引擎。处理器的核心是一个大小为一个字的存储设备(或**寄存器**)，称为**程序计数器(PC)**。在任何时刻，PC都指向主存中的某条机器语言指令(该指令的地址)\n\n处理器从通电到系统断电一直在不断从程序计数器指向的内存处读取指令，解释指令中的位，执行该指令指示的简单操作，然后更新 PC，使其指向下一条指令。\n\n这样的操作围绕着主存、寄存器文件(register file)和算数/逻辑单元(ALU)进。寄存器文件是一个小的存储设备，由一些单个字长的寄存器组成，每个寄存器都有唯一的名字。ALU计算新的数据和地址值。\n\nCPU在指令的要求下可能会执行如下操作:\n+ **加载:** 从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容;\n+ **存储:** 从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容;\n+ **操作:** 把两个寄存器的内容复制到ALU，ALU对这两个字做算数运算，并将结果存放到一个寄存器中;\n+ **跳转:** 从指令本身抽取一个字，并将这个字复制到PC中，以覆盖PC中原先的值。\n\n## 操作系统管理硬件\n操作系统有两个基本功能∶ \n1. 防止硬件被失控的应用程序滥用;\n2. 向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备。\n\n操作系统通过几个基本的抽象概念(**进程、虚拟内存和文件**)来实现。\n\n> 文件是对 I/O 设备的抽象表示，虚拟内存是对主存和磁盘 I/O 设备的抽象表示，进程则是对处理器、主存和 I/O 设备的抽象表示。\n\n### 进程\n进程是操作系统对一个正在运行的程序进行的一种抽象。一个CPU在同一时间只能执行一个进程，但是可以**并发运行**，即一个进程的指令和另一个进程的指令是交错执行，操作系统实现这种交错执行的机制称为**上下文切换**，而上下文就是操作系统保持跟踪进程运行所需的所有状态信息。\n\n### 线程\n在现代操作系统中，一个进程实际上可以由多个称为**线程**的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。\n\n### 虚拟内存\n使用 xv6 里的解释\n\n虚拟内存是每个进程都会有自己独立的 page table，每一个进程只能访问出现在自己page table中的物理内存。操作系统会设置page table，使得每一个进程都有不重合的物理内存，这样一个进程就不能访问其他进程的物理内存，因为其他进程的物理内存都不在它的 page table 中。\n> 就比如 ls 程序会有一个内存地址 0，echo 程序也会有一个内存地址 0，但是操作系统会将两个程序的内存地址0映射到不同的物理内存地址，所以ls程序不能访问echo程序的内存，同样echo程序也不能访问ls程序的内存。\n\n### 文件\n文件就是字节序列。每个I/O设备，包括磁盘、键盘、显示器，甚至网络，都可以看成是文件。系统中的所有输入输出都是通过使用一小组称为 Unix I/O 的系统函数调用读写文件来实现的。\n\n## 系统之间利用网络通信\n从一个单独的系统来看，网络可视为一个 I/O 设备，当系统从主存复制一串字节到网络适配器时，数据流经过网络到达另一台机器，相似地，系统可以读取从其他机器发送来的数据，并把数据复制到自己的主存。","tags":["CSAPP"]},{"title":"微信Robot使用手册","url":"/2023/10/22/微信Robot使用手册/","content":"\n> bot wechat id: liuwx_robot\n\n该机器人依赖于 [chatgpt-on-wechat](https://github.com/zhayujie/chatgpt-on-wechat) 项目进行开发\n\n主要在私聊和群聊中使用，私聊需要使用 bot 作为前缀，比如发送:\"bot 你是谁？\"，如果没有前缀将会被视为普通消息而不予回复。群聊直接 @ 即可。\n\n## 角色功能如下:\n\n以下示例指令都使用 `bot` 为前缀，这是在私聊场景中的使用方法，在群聊中，你只需要将 `bot` 前缀更换为 @ bot 即可。\n\n### 1.Chatgpt3.5\nbot 接入了 chatgpt3.5 ，可以回复你想问的任何问题，即你可以直接将该 bot 当作一个不需要挂代理的 chatgpt 使用，需要注意的是，问题回复的时间将由此时的网络代理环境和回复答案的字数而定，请耐心等待。\n\n### 2.语音识别\nbot 可以进行语音识别，你可以直接发送语音消息进行提问，bot 会对私聊和群聊中所有的语音消息进行识别并且作出回复，需要注意的是，你应该尽量使用标准的普通话。\n\n### 3.AI绘画\nbot 接入了基于 LinkAI 提供的 Midjourney 绘画，提问时只需要以为 \"画\" 为开头即可完成绘画，比如在私聊场景下你可以发送 \"bot 画一只青蛙\" 来进行绘画。\n\n### 4.文档总结\nbot 接入了基于 LinkAI 提供的文档总结对话，你向机器人发送 **文件** 或 **分享链接卡片** 即可生成摘要，进一步可以与文件或链接的内容进行多轮对话。\n> 值得注意的是，目前 bot 仅支持 txt, docx, pdf, md, csv 格式的文件，同时文件大小不能超过 5M ，文件字数最多可支持百万字的文件。分享链接 目前仅支持 公众号文章，后续会支持更多文章类型及视频链接等。\n\n### 5.角色预设\nbot 可以进行角色设定，具体使用方法以及可用角色设定可以使用 `bot $role help` 即可进行查看。\n\n### 6.冒险游戏\n使用 `bot $开始冒险 <故事背景>` ，如果不填写故事背景则会使用默认故事背景，bot 回复后你需要继续告诉 bot 后续发展，这样在你的引导下 bot 会慢慢完善这个完整的冒险游戏。\n\n### 7.管理员指令\n可以根据 `@bot #help` 进行查看，设置管理员需要在私聊中设置，具体方法为 `#auth <口令>` ，口令仅有我本人知晓。\n\n目前该机器人部署在我的个人电脑上，因此仅在开机时可以使用，后续会考虑将其部署至服务器上。\n\n该 bot 使用日期为即日起至 bot 被腾讯风控或者本人无力继续维护时，且用且珍惜。","tags":["Robot"]},{"title":"Hello World","url":"/2023/10/19/hello/","content":"\n> 你好, 世界!\n\n本博客搭建于2023年10月18日，使用 github pages + hexo 进行搭建，使用 aircloud 主题，这是一个简洁轻量的 hexo 博客主题。\n\n这是笔者第三次搭建博客，第一次也是使用 hexo 搭建的一个静态博客，可惜后来在维护过程中遇到了一些当时无法解决的问题，于是放弃。第二次是使用腾讯云服务器，基于 wordpress 框架搭建的一个动态网站，还给它取了一个响亮的名字 —— 「牛牛网」，只是可惜在使用几个月之后因为一直忙于其他事没有管理，又刚好被人注入赌博网站的暗链，导致网站被查封了。\n\n大概快一个月前，我在知乎上发布了这样一条想法:\n> \"感觉简中互联网环境下很难找到一个可以随便分享东西的平台，微信朋友圈发东西需要考虑一些微信好友的感受(浏览很多知乎问题可以看出来大家对朋友发pyq的戾气)，小红书和vb环境太差，知乎里发想法没试过，但是感觉应该也不怎么好用，其实tt是一个很合适的平台，但是感觉海外的中文互联网是一个很小的圈子大部分都是中国留学生和一些出去释放压力的非正常人完全融入不进去，而且也不想发的东西完全没人看(是的，我就是这么矛盾，想让别人看又不想让别人看)\"\n\n今天突然想到，自己搭一个网站或许是一个不错的选择，于是就有了现在的这个网站。换句话说，搭建这个网站的初衷其实不是作为一个知识分享的平台，而且作为一个个人生活分享平台，平时也许会发布一些碎碎念、一些随想随记，又或者是一些学习笔记，总而言之，这将会是一个独属于我自己的小世界，发布的内容完全随机，所以，如果某些文章内容对你造成了一些不好的影响，在此我深表歉意。\n\n我其实是一个分享欲比较强烈的人，但是从广义上来看，人生本来就是一场孤独的旅行，所以，我总是需要写点什么东西来聊以慰藉。也希望大家都能多多记录一下自己，不为被看见，只为留下痕迹。每一个当下，每一刻的感受，都是我们活着的证据。更重要的是，每一分、每一秒都是倒计时，请务必为自己而活。\n\n2023年10月19日，于湖北武汉记。"}]